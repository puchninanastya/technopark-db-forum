/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading wasm modules
/******/ 	var installedWasmModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// object with all compiled WebAssembly.Modules
/******/ 	__webpack_require__.w = {};
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _routes_index_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./routes/index-router */ \"./src/routes/index-router.js\");\n/* harmony import */ var _routes_users_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./routes/users-router */ \"./src/routes/users-router.js\");\n/* harmony import */ var _routes_forums_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./routes/forums-router */ \"./src/routes/forums-router.js\");\n/* harmony import */ var _routes_threads_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./routes/threads-router */ \"./src/routes/threads-router.js\");\n/* harmony import */ var _routes_posts_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./routes/posts-router */ \"./src/routes/posts-router.js\");\n/* harmony import */ var _routes_service_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./routes/service-router */ \"./src/routes/service-router.js\");\nvar express = __webpack_require__(/*! express */ \"express\");\nvar logger = __webpack_require__(/*! morgan */ \"morgan\");\n\n\n\n\n\n\n\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\n\napp.use('/api/', _routes_index_router__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\napp.use('/api/user', _routes_users_router__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\napp.use('/api/forum', _routes_forums_router__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\napp.use('/api/thread', _routes_threads_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\napp.use('/api/post', _routes_posts_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\napp.use('/api/service', _routes_service_router__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\n\nconst port = process.env.PORT || 5000;\napp.listen(port, () => console.log('Forum API server is running on port: ', port));\n\n\n//# sourceURL=webpack:///./src/app.js?");

/***/ }),

/***/ "./src/controllers/forums-controller.js":
/*!**********************************************!*\
  !*** ./src/controllers/forums-controller.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _models_forums_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/forums-model */ \"./src/models/forums-model.js\");\n/* harmony import */ var _models_users_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/users-model */ \"./src/models/users-model.js\");\n/* harmony import */ var _models_threads_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/threads-model */ \"./src/models/threads-model.js\");\n/* harmony import */ var _serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../serializers/threads-serializers */ \"./src/serializers/threads-serializers.js\");\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class ForumsController {\n\n    async createForum(req, res) {\n        let forumData = req.body;\n        let ownerNickname = forumData.user;\n\n        let user = await _models_users_model__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUserByNickname(ownerNickname);\n        if (!user) {\n            return res.status(404).json({message: \"Can't find user with nickname \" + ownerNickname});\n        }\n\n        let existingForum = await _models_forums_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getForumBySlug(forumData.slug);\n        if (existingForum) {\n            return res.status(409).json(\n                {slug: existingForum.slug, title: existingForum.title, user: existingForum.owner_nickname});\n        }\n\n        let createForumResult = await _models_forums_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createForum(forumData, user);\n        if (createForumResult.isSuccess) {\n            res.status(201).json(\n                {slug: createForumResult.data.slug, title: createForumResult.data.title,\n                    user: createForumResult.data.owner_nickname});\n        } else {\n            res.status(500).end();\n        }\n    }\n\n    async getForumDetails(req, res) {\n        let slug = req.params['slug'];\n\n        let existingForum = await _models_forums_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getForumBySlug(slug);\n        if (!existingForum) {\n            return res.status(404).json({message: \"Can't find forum with slug \" + slug});\n        }\n\n        res.json({slug: existingForum.slug, title: existingForum.title, user: existingForum.owner_nickname,\n                posts: existingForum.posts, threads: existingForum.threads });\n    }\n\n    async createThreadForForum(req, res) {\n        let threadData = req.body;\n        let authorNickname = threadData.author;\n        let forumSlug = req.params['slug'];\n        if (/^\\d+$/.test(forumSlug)) {\n            return res.status(400).json({message: \"Slug can not contain only digits \"});\n        }\n\n        let user = await _models_users_model__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUserByNickname(authorNickname);\n        if (!user) {\n            return res.status(404).json({message: \"Can't find user with nickname \" + authorNickname});\n        }\n\n        let existingThread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadBySlug(threadData.slug);\n        if (existingThread) {\n            return res.status(409).json(_serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_3__[\"default\"].serialize_thread(existingThread));\n        }\n\n        let forum = await _models_forums_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getForumBySlug(forumSlug);\n        if (!forum) {\n            return res.status(404).json({message: \"Can't find forum with slug \" + forumSlug});\n        }\n\n        let createThreadResult = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].createThread(threadData, user, forum);\n        if (createThreadResult.isSuccess) {\n\n            let addThreadResult = await _models_forums_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addThreadsToForum(createThreadResult.data.forum_id);\n            if (!addThreadResult.isSuccess) {\n                return res.status(500).end();\n            }\n\n            res.status(201).json(_serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_3__[\"default\"].serialize_thread(createThreadResult.data));\n        } else {\n            res.status(500).end();\n        }\n    }\n\n    async getForumThreads(req, res) {\n        let forumSlug = req.params['slug'];\n        // additional query params\n        let getParams = {};\n        getParams['desc'] = req.query.desc === 'true';\n        getParams['limit'] = req.query.limit ? parseInt(req.query.limit) : 100;\n        getParams['since'] = req.query.since;\n\n        let existingForum = await _models_forums_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getForumBySlug(forumSlug);\n        if (!existingForum) {\n            return res.status(404).json({message: \"Can't find forum with slug \" + forumSlug});\n        }\n\n        let threads = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadsByForumSlug(forumSlug, getParams);\n        res.json(_serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_3__[\"default\"].serialize_threads(threads));\n    }\n\n    async getForumUsers(req, res) {\n        let forumSlug = req.params['slug'];\n        // additional query params\n        let getParams = {};\n        getParams['desc'] = req.query.desc === 'true';\n        getParams['limit'] = req.query.limit ? parseInt(req.query.limit) : 100;\n        getParams['since'] = req.query.since;\n\n        let existingForum = await _models_forums_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getForumBySlug(forumSlug);\n        if (!existingForum) {\n            return res.status(404).json({message: \"Can't find forum with slug \" + forumSlug});\n        }\n\n        let users = await _models_users_model__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUsersFromForum(existingForum.id, getParams);\n        res.json(users);\n    }\n\n});\n\n//# sourceURL=webpack:///./src/controllers/forums-controller.js?");

/***/ }),

/***/ "./src/controllers/posts-controller.js":
/*!*********************************************!*\
  !*** ./src/controllers/posts-controller.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _models_forums_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/forums-model */ \"./src/models/forums-model.js\");\n/* harmony import */ var _models_users_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/users-model */ \"./src/models/users-model.js\");\n/* harmony import */ var _models_threads_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/threads-model */ \"./src/models/threads-model.js\");\n/* harmony import */ var _models_posts_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/posts-model */ \"./src/models/posts-model.js\");\n/* harmony import */ var _serializers_posts_serializers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../serializers/posts-serializers */ \"./src/serializers/posts-serializers.js\");\n/* harmony import */ var _serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../serializers/threads-serializers */ \"./src/serializers/threads-serializers.js\");\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class PostsController {\n\n    async getPostDetails(req, res) {\n        let postId = req.params['id'];\n\n        let existingPost = await _models_posts_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getPostById(postId);\n        if (!existingPost) {\n            return res.status(404).json({message: \"Can't find post with id \" + postId});\n        }\n\n        let result = {};\n        result.post = _serializers_posts_serializers__WEBPACK_IMPORTED_MODULE_4__[\"default\"].serialize_post(existingPost);\n        if (req.query['related']) {\n            for (let related of req.query['related'].split(',')) {\n                switch (related) {\n                    case 'user':\n                        result.author = await _models_users_model__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUserById(existingPost.author_id);\n                        break;\n                    case 'thread':\n                        result.thread = _serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_5__[\"default\"].serialize_thread\n                        (await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadById(existingPost.thread_id));\n                        break;\n                    case 'forum':\n                        result.forum = await _models_forums_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getForumById(existingPost.forum_id);\n                        result.forum.user = result.forum.owner_nickname;\n                        break;\n                }\n            }\n        }\n\n        res.json(result);\n    }\n\n    async updatePostDetails(req, res) {\n        let postId = req.params['id'];\n\n        let existingPost = await _models_posts_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getPostById(postId);\n        if (!existingPost) {\n            return res.status(404).json({message: \"Can't find post with id \" + postId});\n        }\n\n        if (!req.body.message || req.body.message === existingPost.message) {\n            return res.json(_serializers_posts_serializers__WEBPACK_IMPORTED_MODULE_4__[\"default\"].serialize_post(existingPost));\n        }\n\n        let updatedPost = await _models_posts_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].updatePost(postId, req.body);\n        if (!updatedPost.isSuccess) {\n            return res.status(500).json({ message: \"Can't change post with id \" + postId });\n        }\n\n        res.json(_serializers_posts_serializers__WEBPACK_IMPORTED_MODULE_4__[\"default\"].serialize_post(updatedPost.data));\n    }\n\n});\n\n//# sourceURL=webpack:///./src/controllers/posts-controller.js?");

/***/ }),

/***/ "./src/controllers/service-controller.js":
/*!***********************************************!*\
  !*** ./src/controllers/service-controller.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _models_forums_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/forums-model */ \"./src/models/forums-model.js\");\n/* harmony import */ var _models_users_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/users-model */ \"./src/models/users-model.js\");\n/* harmony import */ var _models_threads_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/threads-model */ \"./src/models/threads-model.js\");\n/* harmony import */ var _models_posts_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/posts-model */ \"./src/models/posts-model.js\");\n/* harmony import */ var _models_votes_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/votes-model */ \"./src/models/votes-model.js\");\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class ServiceController {\n\n    async getServiceStatus(req, res) {\n\n        let users = await _models_users_model__WEBPACK_IMPORTED_MODULE_1__[\"default\"].countAllUsers();\n        let forums = await _models_forums_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].countAllForums();\n        let threads = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].countAllThreads();\n        let posts = await _models_posts_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].countAllPosts();\n\n        res.json({  user: users ? Number(users.count)        : 0,\n                    forum: forums ? Number(forums.count)     : 0,\n                    thread: threads ? Number(threads.count)  : 0,\n                    post: posts ? Number(posts.count)        : 0});\n    }\n\n    async clearAll(req, res) {\n\n        await _models_users_model__WEBPACK_IMPORTED_MODULE_1__[\"default\"].truncateAllUsers();\n        await _models_forums_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].truncateAllForums();\n        await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].truncateAllThreads();\n        await _models_posts_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].truncateAllPosts();\n        await _models_votes_model__WEBPACK_IMPORTED_MODULE_4__[\"default\"].truncateAllVotes();\n\n        res.end();\n    }\n\n});\n\n//# sourceURL=webpack:///./src/controllers/service-controller.js?");

/***/ }),

/***/ "./src/controllers/threads-controller.js":
/*!***********************************************!*\
  !*** ./src/controllers/threads-controller.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _models_forums_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/forums-model */ \"./src/models/forums-model.js\");\n/* harmony import */ var _models_users_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/users-model */ \"./src/models/users-model.js\");\n/* harmony import */ var _models_threads_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/threads-model */ \"./src/models/threads-model.js\");\n/* harmony import */ var _models_posts_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/posts-model */ \"./src/models/posts-model.js\");\n/* harmony import */ var _models_votes_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/votes-model */ \"./src/models/votes-model.js\");\n/* harmony import */ var _serializers_posts_serializers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../serializers/posts-serializers */ \"./src/serializers/posts-serializers.js\");\n/* harmony import */ var _serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../serializers/threads-serializers */ \"./src/serializers/threads-serializers.js\");\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class ThreadsController {\n\n    async createPostsForThread(req, res) {\n        let postsData = req.body;\n\n        let thread;\n        if (/^\\d+$/.test(req.params['slug_or_id'])) {\n            thread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadById(Number(req.params['slug_or_id']));\n        } else {\n            thread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadBySlug(req.params['slug_or_id']);\n        }\n        if (!thread) {\n            return res.status(404).json({message: \"Can't find forum with slug or id \" + req.params['slug_or_id']});\n        }\n        thread.id = Number(thread.id);\n\n        if (Array.isArray(postsData) && !postsData.length) {\n            return res.status(201).json(postsData);\n        } else if (!Array.isArray(postsData)) {\n            return res.status(400).json({message: \"Request data must be an array.\"});\n        }\n\n        let postsResult = [];\n        let createdDatetime = new Date();\n        for (let postData of postsData) {\n            // TODO: add transaction, add batch query ?\n            let user = await _models_users_model__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUserByNickname(postData.author);\n            if (!user) {\n                return res.status(404).json({message: \"Can't find user with nickname \" + postData.author});\n            }\n\n            postData['created'] = createdDatetime;\n\n            let createPostResult = await _models_posts_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].createPost(postData, thread, user);\n            if (createPostResult.isSuccess) {\n                postsResult.push(createPostResult.data);\n            } else if (createPostResult.message === '409') {\n                return res.status(409).json({message: \"Can't create post this parent in a different thread.\"});\n            } else {\n                return res.status(400).end();\n            }\n        }\n\n        if (postsData.length > 0) {\n            let addPostsResult = await _models_forums_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addPostsToForum(thread.forum_id, postsData.length);\n            if (!addPostsResult.isSuccess) {\n                return res.status(500).end();\n            }\n        }\n\n        res.status(201).json(_serializers_posts_serializers__WEBPACK_IMPORTED_MODULE_5__[\"default\"].serialize_posts(postsResult));\n    }\n\n    async createOrUpdateVoteForThread(req, res) {\n        let voteData = req.body;\n\n        let user = await _models_users_model__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUserByNickname(voteData.nickname);\n        if (!user) {\n            return res.status(404).json({message: \"Can't find user with nickname \" + voteData.nickname});\n        }\n\n        let thread;\n        if (/^\\d+$/.test(req.params['slug_or_id'])) {\n            thread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadById(Number(req.params['slug_or_id']));\n        } else {\n            thread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadBySlug(req.params['slug_or_id']);\n        }\n        if (!thread) {\n            return res.status(404).json({message: \"Can't find forum with slug or id \" + req.params['slug_or_id']});\n        }\n        thread.id = Number(thread.id);\n\n        let voteResult = await _models_votes_model__WEBPACK_IMPORTED_MODULE_4__[\"default\"].createOrUpdateVote(voteData.voice, user, thread);\n        if (!voteResult.isSuccess) {\n            return res.status(400).json({message: voteResult.message});\n        } else if (!voteResult.data) {\n            return res.status(200).json(_serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_6__[\"default\"].serialize_thread(thread));\n        }\n\n        let voiceValue = voteResult.data.voice;\n        if (voteResult.data.existed) {\n            voiceValue = voiceValue == 1 ? voiceValue + 1 : voiceValue - 1;\n        }\n\n        let updateThreadResult = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].updateThreadVotes(thread, voiceValue);\n        if (voteResult.isSuccess) {\n            return res.status(200).json(_serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_6__[\"default\"].serialize_thread(updateThreadResult.data));\n        }\n\n        res.status(500).end();\n    }\n\n    async getThreadDetails(req, res) {\n\n        let thread;\n        if (/^\\d+$/.test(req.params['slug_or_id'])) {\n            thread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadById(Number(req.params['slug_or_id']));\n        } else {\n            thread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadBySlug(req.params['slug_or_id']);\n        }\n\n        if (!thread) {\n            return res.status(404).json({message: \"Can't find forum with slug or id \" + req.params['slug_or_id']});\n        }\n        res.json(_serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_6__[\"default\"].serialize_thread(thread));\n    }\n\n    async updateThreadDetails(req, res) {\n        let newThreadData = req.body;\n\n        let thread;\n        if (/^\\d+$/.test(req.params['slug_or_id'])) {\n            thread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadById(Number(req.params['slug_or_id']));\n        } else {\n            thread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadBySlug(req.params['slug_or_id']);\n        }\n\n        if (!thread) {\n            return res.status(404).json({message: \"Can't find forum with slug or id \" + req.params['slug_or_id']});\n        }\n\n        let updatedThread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].updateThread(thread.id, newThreadData);\n        if (!updatedThread) {\n            return res.status(409).json({ message: \"Can't change thread with id \" + id });\n        }\n\n        if (updatedThread === true) {\n            res.json(_serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_6__[\"default\"].serialize_thread(thread));\n        } else {\n            res.json(_serializers_threads_serializers__WEBPACK_IMPORTED_MODULE_6__[\"default\"].serialize_thread(updatedThread));\n        }\n\n    }\n\n    async getThreadPosts(req, res) {\n        let getParams = [];\n        getParams['desc'] = req.query.desc === 'true';\n        getParams['limit'] = req.query.limit ? parseInt(req.query.limit) : 100;\n        getParams['since'] = Number(req.query.since);\n\n        let thread;\n        if (/^\\d+$/.test(req.params['slug_or_id'])) {\n            thread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadById(Number(req.params['slug_or_id']));\n        } else {\n            thread = await _models_threads_model__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getThreadBySlug(req.params['slug_or_id']);\n        }\n\n        if (!thread) {\n            return res.status(404).json({message: \"Can't find forum with slug or id \" + req.params['slug_or_id']});\n        }\n\n        let postsResult;\n        switch (req.query.sort) {\n            case 'tree':\n                postsResult = await _models_posts_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getPostsByThreadIdTreeSort(thread.id, getParams);\n                break;\n            case 'parent_tree':\n                postsResult = await _models_posts_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getPostsByThreadIdParentTreeSort(thread.id, getParams);\n                break;\n            default:\n                postsResult = await _models_posts_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getPostsByThreadIdFlatSort(thread.id, getParams);\n        }\n        res.json(_serializers_posts_serializers__WEBPACK_IMPORTED_MODULE_5__[\"default\"].serialize_posts(postsResult));\n    }\n\n});\n\n//# sourceURL=webpack:///./src/controllers/threads-controller.js?");

/***/ }),

/***/ "./src/controllers/users-controller.js":
/*!*********************************************!*\
  !*** ./src/controllers/users-controller.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _models_users_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/users-model */ \"./src/models/users-model.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class UsersController {\n\n    async createUser(req, res) {\n        let nickname = req.params['nickname'];\n        let userData = req.body;\n\n        let existingUser = await _models_users_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getUsersByNicknameOrEmail(nickname, userData.email);\n        if (existingUser.length > 0) {\n            return res.status(409).json(existingUser);\n        }\n\n        let result = await _models_users_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createUser(nickname, userData);\n        if (result.isSuccess) {\n            res.status(201).json(result.data);\n        } else {\n            res.status(500).end();\n        }\n    }\n\n    async getUser(req, res) {\n        let nickname = req.params['nickname'];\n\n        let existingUser = await _models_users_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getUserByNickname(nickname);\n        if (!existingUser) {\n            return res.status(404).json({ message: \"Can't find user with nickname \" + nickname });\n        }\n\n        res.json(existingUser);\n    }\n\n    async updateUser(req, res) {\n        let nickname = req.params['nickname'];\n        let userData = req.body;\n\n        let existingUser = await _models_users_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getUserByNickname(nickname);\n\n        if (!existingUser) {\n            return res.status(404).json({ message: \"Can't find user with nickname \" + nickname });\n        }\n\n        let updatedUser = await _models_users_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateUser(nickname, userData);\n        if (!updatedUser) {\n            return res.status(409).json({ message: \"Can't change user with nickname \" + nickname });\n        }\n\n        if (updatedUser === true) {\n            res.json(existingUser);\n        } else {\n            res.json(updatedUser);\n        }\n\n    }\n});\n\n//# sourceURL=webpack:///./src/controllers/users-controller.js?");

/***/ }),

/***/ "./src/db-config.js":
/*!**************************!*\
  !*** ./src/db-config.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/db */ \"./src/modules/db.js\");\n/**\n * Database configuration for database module\n */\n\n\n\n// Database connection details;\nconst connOptions = {\n    host: 'localhost', // localhost is the default\n    port: 5432, // 5432 is the default;\n    database: 'docker',\n    user: 'docker',\n    password: 'docker'\n};\n\nlet dbConfig = new _modules_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"](connOptions);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (dbConfig);\n\n\n//# sourceURL=webpack:///./src/db-config.js?");

/***/ }),

/***/ "./src/models/forums-model.js":
/*!************************************!*\
  !*** ./src/models/forums-model.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _db_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../db-config */ \"./src/db-config.js\");\n/**\n * Forums model.\n * @module models/forums-model\n */\n\n\nconst PQ = __webpack_require__(/*! pg-promise */ \"pg-promise\").ParameterizedQuery;\n\n/** Class representing an Forums model. */\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class ForumsModel {\n\n    /**\n     * Create an Forums model.\n     */\n    constructor() {\n        this._dbContext = _db_config__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    }\n\n    /**\n     * Count all forums.\n     * @return forums amount\n     * @return empty object if no forums\n     */\n    async countAllForums() {\n        try {\n            return await this._dbContext.db.one(`SELECT count(*) FROM forums`);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Truncate all forums.\n     */\n    async truncateAllForums() {\n        try {\n            return await this._dbContext.db.none(`TRUNCATE forums CASCADE`);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Add new forum.\n     * @param forumData - object of forum data\n     * @param userData - forum owner's user object\n     * @return created forum if successful query\n     * @return error message if unsuccessful query\n     */\n    async createForum(forumData, userData) {\n        let result = {\n            isSuccess: false,\n            message: '',\n            data: null\n        };\n        try {\n            const createForumQuery = new PQ(`INSERT INTO forums (slug, title, owner_id, owner_nickname) \n                VALUES ($1, $2, $3, $4) RETURNING *`);\n            createForumQuery.values = [forumData.slug, forumData.title, userData.id, userData.nickname];\n            result.data = await this._dbContext.db.one(createForumQuery);\n            result.isSuccess = true;\n        } catch (error) {\n            result.message = error.message;\n            console.log('ERROR: ', error.message || error);\n        }\n        return result;\n    }\n\n    /**\n     * Get forum by id.\n     * @param id - forum's id\n     * @return forum's object if forum with such id exists\n     * @return empty object if no forums with such id\n     */\n    async getForumById(id) {\n        try {\n            const getForumQuery = new PQ(`SELECT * FROM forums WHERE id = $1`, [id]);\n            return await this._dbContext.db.oneOrNone(getForumQuery);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n\n    /**\n     * Get forum by slug.\n     * @param slug - forum's slug (human-readable name for url)\n     * @return forum's object if forum with such slug exists\n     * @return empty object if no forums with such slug\n     */\n    async getForumBySlug(slug) {\n        try {\n            const getForumQuery = new PQ(`SELECT * FROM forums WHERE slug = $1`, [slug]);\n            return await this._dbContext.db.oneOrNone(getForumQuery);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Get forum id by slug.\n     * @param slug - forum's slug (human-readable name for url)\n     * @return forum's id if forum with such slug exists\n     * @return undefined if no forums with such slug\n     */\n    async getForumIdBySlug(slug) {\n        try {\n            const getForumQuery = new PQ(`SELECT id FROM forums WHERE slug = $1`, [slug]);\n            let forumQueryResult = await this._dbContext.db.oneOrNone(getForumQuery);\n            return forumQueryResult['id'];\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    async addPostsToForum(id, posts_num) {\n        let result = {\n            isSuccess: false,\n            message: '',\n            data: null\n        };\n        try {\n            const updatePostsQuery = new PQ(`UPDATE forums SET \n                posts = posts + $1\n                WHERE id = $2\n                RETURNING *`);\n            updatePostsQuery.values = [posts_num, id];\n            result.data = await this._dbContext.db.one(updatePostsQuery);\n            result.isSuccess = true;\n        } catch (error) {\n            result.message = error.message;\n            console.log('ERROR: ', error.message || error);\n        }\n        return result;\n    }\n\n    async addThreadsToForum(id, threads_num = 1) {\n        let result = {\n            isSuccess: false,\n            message: '',\n            data: null\n        };\n        try {\n            const updateThreadsQuery = new PQ(`UPDATE forums SET \n                threads = threads + $1\n                WHERE id = $2\n                RETURNING *`);\n            updateThreadsQuery.values = [threads_num, id];\n            result.data = await this._dbContext.db.one(updateThreadsQuery);\n            result.isSuccess = true;\n        } catch (error) {\n            result.message = error.message;\n            console.log('ERROR: ', error.message || error);\n        }\n        return result;\n    }\n\n});\n\n//# sourceURL=webpack:///./src/models/forums-model.js?");

/***/ }),

/***/ "./src/models/posts-model.js":
/*!***********************************!*\
  !*** ./src/models/posts-model.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _db_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../db-config */ \"./src/db-config.js\");\n/* harmony import */ var _utils_db_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/db-helpers */ \"./src/utils/db-helpers.js\");\n/**\n * Posts model.\n * @module models/posts-model\n */\n\n\n\nconst PQ = __webpack_require__(/*! pg-promise */ \"pg-promise\").ParameterizedQuery;\n\n/** Class representing an Posts model. */\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class PostsModel {\n\n    /**\n     * Create an Posts model.\n     */\n    constructor() {\n        this._dbContext = _db_config__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    }\n\n    /**\n     * Count all posts.\n     * @return posts amount\n     * @return empty object if no posts\n     */\n    async countAllPosts() {\n        try {\n            return await this._dbContext.db.one(`SELECT count(*) FROM posts`);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Truncate all posts.\n     */\n    async truncateAllPosts() {\n        try {\n            return await this._dbContext.db.none(`TRUNCATE posts CASCADE`);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Add new post to thread.\n     */\n    async createPost(postData, thread, user) {\n        let result = {\n            isSuccess: false,\n            message: '',\n            data: null\n        };\n        try {\n            // Check if parent post is in the same thread as new post\n            if (postData.parent) {\n                const getParentPostQuery = new PQ(`SELECT id FROM posts WHERE id = $1 AND thread_id = $2`);\n                getParentPostQuery.values = [postData.parent, thread.id];\n                let parentResult = await this._dbContext.db.oneOrNone(getParentPostQuery);\n                if (!parentResult) {\n                    result.message = '409';\n                    return result;\n                }\n            }\n            const createPostQuery = new PQ(`INSERT INTO posts (\n                author_id, author_nickname, forum_id, forum_slug, thread_id, thread_slug,\n                created, message, parent)\n                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *`);\n            createPostQuery.values = [\n                user.id, user.nickname, thread.forum_id, thread.forum_slug,\n                thread.id, thread.slug, postData.created, postData.message,\n                postData.parent ? postData.parent : null,];\n            result.data = await this._dbContext.db.one(createPostQuery);\n            // Add this user for forum's users table if not exists\n            await this._dbContext.db.oneOrNone(`\n            INSERT INTO forum_users (forum_id, user_id)\n                VALUES ($1, $2)\n                ON CONFLICT ON CONSTRAINT unique_user_in_forum DO NOTHING\n                RETURNING *`,\n                [thread.forum_id, user.id]);\n            result.isSuccess = true;\n        } catch (error) {\n            result.message = error.message;\n            console.log('ERROR: ', error.message || error);\n        }\n        return result;\n    }\n\n    /**\n     * Get post by id.\n     * @param id - post's id\n     * @return post's object if post with such id exists\n     * @return empty object if no posts with such id\n     */\n    async getPostById(id) {\n        try {\n            const getPostQuery = new PQ(`SELECT * FROM posts WHERE id = $1`, [id]);\n            return await this._dbContext.db.oneOrNone(getPostQuery);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Get posts by thread id flat sorted by created datetime.\n     * @param threadId - thread's id to find thread's posts\n     * @param getParams - additional params for getting threads (desc for sort, since datetime and search limit)\n     * @return array of found posts if posts for thread with such id exist\n     * @return empty array if no posts for thread with such slug\n     */\n    async getPostsByThreadIdFlatSort(threadId, getParams) {\n        try {\n            let sinceSub;\n            if (getParams.since) {\n                sinceSub = getParams.desc ? 'AND id < ' + getParams.since : 'AND id > ' + getParams.since ;\n            }\n            return await this._dbContext.db.manyOrNone(`SELECT * FROM posts WHERE thread_id = $1 $5:raw\n                ORDER BY $2:raw, $3:raw LIMIT $4`, [\n                threadId,\n                (getParams.desc ? 'created DESC' : 'created ASC'),\n                (getParams.desc ? 'id DESC' : 'id ASC'),\n                getParams.limit,\n                (getParams.since ? sinceSub : '')]);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Get posts by thread id sorted as tree by path to post.\n     * @param threadId - thread's id to find thread's posts\n     * @param getParams - additional params for getting threads (desc for sort, since datetime and search limit)\n     * @return array of found posts if posts for thread with such id exist\n     * @return empty array if no posts for thread with such slug\n     */\n    async getPostsByThreadIdTreeSort(threadId, getParams) {\n        try {\n            let whereCondition;\n            if (getParams.since && getParams.desc) {\n                whereCondition = this._dbContext.pgp.as.format(` WHERE thread_id = $1\n                AND path_to_this_post < (SELECT path_to_this_post FROM posts WHERE id = $2) `, [threadId, getParams.since]);\n            } else if (getParams.since && !getParams.desc) {\n                whereCondition = this._dbContext.pgp.as.format(` WHERE thread_id = $1\n                AND path_to_this_post > (SELECT path_to_this_post FROM posts WHERE id = $2) `, [threadId, getParams.since]);\n            } else {\n                whereCondition = this._dbContext.pgp.as.format(` WHERE thread_id = $1 `, [threadId]);\n            }\n            return await this._dbContext.db.manyOrNone(`SELECT * FROM posts $1:raw\n                ORDER BY $2:raw LIMIT $3`, [\n                whereCondition.toString(),\n                (getParams.desc ? 'path_to_this_post DESC' : 'path_to_this_post ASC'),\n                getParams.limit]);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Get posts by thread id sorted as tree by path to post.\n     * @param threadId - thread's id to find thread's posts\n     * @param getParams - additional params for getting threads (desc for sort, since datetime and search limit)\n     * @return array of found posts if posts for thread with such id exist\n     * @return empty array if no posts for thread with such slug\n     */\n    async getPostsByThreadIdParentTreeSort(threadId, getParams) {\n        try {\n            let subWhereCondition;\n            if (getParams.since && getParams.desc) {\n                subWhereCondition = this._dbContext.pgp.as.format(` WHERE parent IS NULL \n                AND thread_id = $1  \n                AND path_to_this_post[1] < (SELECT path_to_this_post[1] FROM posts WHERE id =  $2) `,\n                    [threadId, getParams.since]);\n            } else if (getParams.since && !getParams.desc) {\n                subWhereCondition = this._dbContext.pgp.as.format(` WHERE parent IS NULL \n                AND thread_id = $1  \n                AND path_to_this_post[1] > (SELECT path_to_this_post[1] FROM posts WHERE id =  $2) `,\n                    [threadId, getParams.since]);\n            } else {\n                subWhereCondition = this._dbContext.pgp.as.format(` WHERE parent IS NULL \n                AND thread_id = $1  `, [threadId]);\n            }\n            return await this._dbContext.db.manyOrNone(`\n                SELECT * FROM posts JOIN\n                (SELECT id AS sub_parent_id FROM posts $1:raw ORDER BY $5:raw LIMIT $4 ) AS sub \n                ON (thread_id = $2 AND sub.sub_parent_id = path_to_this_post[1]) \n                ORDER BY $3:raw`, [\n                subWhereCondition.toString(),\n                threadId,\n                (getParams.desc ? 'sub.sub_parent_id DESC, path_to_this_post ASC' : 'path_to_this_post ASC'),\n                getParams.limit,\n                (getParams.desc ? 'id DESC ' : 'id ASC'),]);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Update post.\n     * @param id - post's id\n     * @param postData - object of updated post data (may consist not of all fields)\n     * @return updated post if successful query\n     * @return error message if unsuccessful query\n     */\n    async updatePost(id, postData) {\n        let result = {\n            isSuccess: false,\n            message: '',\n            data: null\n        };\n        try {\n            const updatePostQuery = new PQ(`UPDATE posts SET \n                message = $1, isEdited = True\n                WHERE id = $2\n                RETURNING *`);\n            updatePostQuery.values = [postData.message, id];\n            result.data = await this._dbContext.db.one(updatePostQuery);\n            result.isSuccess = true;\n        } catch (error) {\n            result.message = error.message;\n            console.log('ERROR: ', error.message || error);\n        }\n        return result;\n    }\n\n});\n\n//# sourceURL=webpack:///./src/models/posts-model.js?");

/***/ }),

/***/ "./src/models/threads-model.js":
/*!*************************************!*\
  !*** ./src/models/threads-model.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _db_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../db-config */ \"./src/db-config.js\");\n/* harmony import */ var _utils_db_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/db-helpers */ \"./src/utils/db-helpers.js\");\n/**\n * Threads model.\n * @module models/threads-model\n */\n\n\n\nconst PQ = __webpack_require__(/*! pg-promise */ \"pg-promise\").ParameterizedQuery;\n\n/** Class representing an Threads model. */\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class ThreadsModel {\n\n    /**\n     * Create an Threads model.\n     */\n    constructor() {\n        this._dbContext = _db_config__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\n        // Creating a reusable ColumnSet for all updates:\n        this._updateThreadCS = new  this._dbContext.pgp.helpers.ColumnSet([\n            Object(_utils_db_helpers__WEBPACK_IMPORTED_MODULE_1__[\"column_with_skip\"])('message'), Object(_utils_db_helpers__WEBPACK_IMPORTED_MODULE_1__[\"column_with_skip\"])('title')\n        ], {table: 'threads'});\n    }\n\n    /**\n     * Count all threads.\n     * @return threads amount\n     * @return empty object if no threads\n     */\n    async countAllThreads() {\n        try {\n            const countThreadsQuery = new PQ(`SELECT count(*) FROM threads`);\n            return await this._dbContext.db.one(countThreadsQuery);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Truncate all threads.\n     */\n    async truncateAllThreads() {\n        try {\n            return await this._dbContext.db.none(`TRUNCATE threads CASCADE`);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Add new thread to forum.\n     * @param threadData - object of thread data\n     * @param user - thread's author object\n     * @param forum - object of thread's forum with id and slug fields\n     * @return created thread if successful query\n     * @return error message if unsuccessful query\n     */\n    async createThread(threadData, user, forum) {\n        let result = {\n            isSuccess: false,\n            message: '',\n            data: null\n        };\n        try {\n            const createThreadQuery = new PQ(`INSERT INTO threads (\n                slug,\n                author_id, author_nickname,\n                forum_id, forum_slug, \n                created, title, message) \n                VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *`);\n            createThreadQuery.values = [\n                threadData.slug,\n                user.id, user.nickname,\n                forum.id, forum.slug,\n                threadData.created, threadData.title, threadData.message];\n            result.data = await this._dbContext.db.one(createThreadQuery);\n            // Add this user for forum's users table if not exists\n            await this._dbContext.db.oneOrNone(`\n            INSERT INTO forum_users (forum_id, user_id)\n                VALUES ($1, $2)\n                ON CONFLICT ON CONSTRAINT unique_user_in_forum DO NOTHING\n                RETURNING *`,\n                [forum.id, user.id]);\n            result.isSuccess = true;\n        } catch (error) {\n            result.message = error.message;\n            console.log('ERROR: ', error.message || error);\n        }\n        return result;\n    }\n\n    /**\n     * Get thread by id.\n     * @param id - thread's id\n     * @return thread's object if thread with such id exists\n     * @return empty object if no threads with such id\n     */\n    async getThreadById(id) {\n        try {\n            const getThreadQuery = new PQ(`SELECT * FROM threads WHERE id = $1`, [id]);\n            return await this._dbContext.db.oneOrNone(getThreadQuery);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Get thread by slug.\n     * @param slug - thread's slug (human-readable name for url)\n     * @return thread's object if thread with such slug exists\n     * @return empty object if no threads with such slug\n     */\n    async getThreadBySlug(slug) {\n        try {\n            const getThreadQuery = new PQ(`SELECT * FROM threads WHERE slug = $1`, [slug]);\n            return await this._dbContext.db.oneOrNone(getThreadQuery);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    async updateThread(id, threadData) {\n        try {\n            let updateThreadQuery = this._dbContext.pgp.helpers.update(threadData, this._updateThreadCS,\n                null, {emptyUpdate: true});\n            if (updateThreadQuery === true) {\n                return true;\n            } else {\n                updateThreadQuery += \" WHERE \\\"id\\\" = \\'\" +  id + \"\\' RETURNING *\";\n            }\n            return await this._dbContext.db.oneOrNone(updateThreadQuery);\n        }\n        catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n\n    /**\n     * Get threads by forum slug.\n     * @param forumSlug - forum's slug to find forum's threads\n     * @param getParams - additional params for getting threads (desc for sort, since datetime and search limit)\n     * @return array of found threads if threads for forum with such slug exist\n     * @return empty array if no threads for forum with such slug\n     */\n    async getThreadsByForumSlug(forumSlug, getParams) {\n        try {\n            // pre-format WHERE conditions\n            let whereCondition;\n            if (getParams.since && getParams.desc) {\n                whereCondition = this._dbContext.pgp.as.format(` WHERE forum_slug = $1\n                AND created <= $2`, [forumSlug, getParams.since]);\n            } else if (getParams.since && !getParams.desc) {\n                whereCondition = this._dbContext.pgp.as.format(` WHERE forum_slug = $1\n                AND created >= $2`, [forumSlug, getParams.since]);\n            } else {\n                whereCondition = this._dbContext.pgp.as.format(` WHERE forum_slug = $1`, [forumSlug]);\n            }\n            return await this._dbContext.db.manyOrNone(`SELECT * FROM threads $1:raw\n                ORDER BY $2:raw LIMIT $3`, [\n                    whereCondition.toString(),\n                    (getParams.desc ? 'created DESC' : 'created ASC'),\n                    getParams.limit]);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Update votes for thread.\n     */\n    async updateThreadVotes(thread, voiceValue) {\n        let result = {\n            isSuccess: false,\n            message: '',\n            data: null\n        };\n        try {\n            const updateVotesQuery = new PQ(`UPDATE threads SET \n                votes = votes + $1\n                WHERE id = $2\n                RETURNING *`);\n            updateVotesQuery.values = [voiceValue, thread.id];\n            result.data = await this._dbContext.db.one(updateVotesQuery);\n            result.isSuccess = true;\n        } catch (error) {\n            result.message = error.message;\n            console.log('ERROR: ', error.message || error);\n        }\n        return result;\n    }\n\n});\n\n//# sourceURL=webpack:///./src/models/threads-model.js?");

/***/ }),

/***/ "./src/models/users-model.js":
/*!***********************************!*\
  !*** ./src/models/users-model.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _db_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../db-config */ \"./src/db-config.js\");\n/* harmony import */ var _utils_db_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/db-helpers */ \"./src/utils/db-helpers.js\");\n/**\n * Users model.\n * @module models/users-model\n */\n\n\nconst PQ = __webpack_require__(/*! pg-promise */ \"pg-promise\").ParameterizedQuery;\n// const pgp_helpers = require('pg-promise').helpers;\n\n\n\n\n/** Class representing an Users model. */\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class UsersModel {\n\n    /**\n     * Create an Users model.\n     */\n    constructor() {\n        this._dbContext = _db_config__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\n        // Creating a reusable ColumnSet for all updates:\n        this._updateUserCS = new  this._dbContext.pgp.helpers.ColumnSet([\n            Object(_utils_db_helpers__WEBPACK_IMPORTED_MODULE_1__[\"column_with_skip\"])('nickname'), Object(_utils_db_helpers__WEBPACK_IMPORTED_MODULE_1__[\"column_with_skip\"])('about'),\n            Object(_utils_db_helpers__WEBPACK_IMPORTED_MODULE_1__[\"column_with_skip\"])('fullname'), Object(_utils_db_helpers__WEBPACK_IMPORTED_MODULE_1__[\"column_with_skip\"])('email')\n            ], {table: 'users'});\n    }\n\n    /**\n     * Count all users.\n     * @return users amount\n     * @return empty object if no users\n     */\n    async countAllUsers() {\n        try {\n            return await this._dbContext.db.one(`SELECT count(*) FROM users`);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Truncate all users.\n     */\n    async truncateAllUsers() {\n        try {\n            return await this._dbContext.db.none(`TRUNCATE users CASCADE`);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Add new user.\n     * @param nickname - user's nickname\n     * @param userData - object of additional user data\n     * @return created user if successful query\n     * @return error message if unsuccessful query\n     */\n    async createUser(nickname, userData) {\n        let result = {\n            isSuccess: false,\n            message: '',\n            data: null\n        };\n        try {\n            const createUserQuery = new PQ(`INSERT INTO users (nickname, about, fullname, email) \n                VALUES ($1, $2, $3, $4) RETURNING *`);\n            createUserQuery.values = [nickname, userData.about, userData.fullname, userData.email];\n            result.data = await this._dbContext.db.one(createUserQuery);\n            result.isSuccess = true;\n        } catch (error) {\n            result.message = error.message;\n            console.log('ERROR: ', error.message || error);\n        }\n        return result;\n    }\n\n    /**\n     * Get user by id.\n     * @param id - user's id\n     * @return user's object if user with such id exists\n     * @return empty object if no users with such id\n     */\n    async getUserById(id) {\n        try {\n            const getUserQuery = new PQ(`SELECT * FROM users WHERE id = $1`, [id]);\n            return await this._dbContext.db.oneOrNone(getUserQuery);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Get users by nickname or email.\n     * @param nickname - user's nickname\n     * @param email - user's email\n     * @return array of found users if users with such email or nickname exist\n     * @return empty array if no users with such email or nickname\n     */\n    async getUsersByNicknameOrEmail(nickname, email) {\n        try {\n            const getUserQuery = new PQ(`SELECT * FROM users WHERE nickname = $1 OR email = $2`);\n            getUserQuery.values = [nickname, email];\n            return await this._dbContext.db.manyOrNone(getUserQuery);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Get user by nickname.\n     * @param nickname - user's nickname\n     * @return user's object if user with such nickname exists\n     * @return empty object if no users with such nickname\n     */\n    async getUserByNickname(nickname) {\n        try {\n            const getUserQuery = new PQ(`SELECT * FROM users WHERE nickname = $1`, [nickname]);\n            return await this._dbContext.db.oneOrNone(getUserQuery);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Get users that created posts in forum.\n     * @param forum_id - forum's id, where to find users\n     * @param getParams - additional params for getting users (desc for sort, since datetime and search limit)\n     * @return array of found users that created posts in forum with such id\n     * @return empty array if no users posts in forum with such id\n     */\n    async getUsersFromForum(forum_id, getParams) {\n        try {\n            // pre-format WHERE conditions\n            let whereCondition;\n            if (getParams.since && getParams.desc) {\n                whereCondition = this._dbContext.pgp.as.format(` WHERE id IN \n                (SELECT user_id FROM forum_users WHERE forum_id = $1)\n                AND nickname < $2 `, [forum_id, getParams.since]);\n            } else if (getParams.since && !getParams.desc) {\n                whereCondition = this._dbContext.pgp.as.format(`WHERE id IN \n                (SELECT user_id FROM forum_users WHERE forum_id = $1)\n                AND nickname > $2 `, [forum_id, getParams.since]);\n            } else {\n                whereCondition = this._dbContext.pgp.as.format(` WHERE id IN \n                (SELECT user_id FROM forum_users WHERE forum_id = $1)`, [forum_id]);\n            }\n            return await this._dbContext.db.manyOrNone(`\n                SELECT id, about, email, fullname, nickname \n                FROM users $1:raw \n                ORDER BY $2:raw LIMIT $3`,\n                [whereCondition.toString(),\n                (getParams.desc ? 'nickname DESC' : 'nickname ASC'),\n                getParams.limit]);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Update user data.\n     * @param nickname - user's nickname\n     * @param userData - object of additional user data (may consist not of all fields)\n     * @return updated user if successful query\n     * @return error message if unsuccessful query\n     */\n    async updateUser(nickname, userData) {\n        try {\n            let updateUserQuery = this._dbContext.pgp.helpers.update(userData, this._updateUserCS,\n                null, {emptyUpdate: true});\n            if (updateUserQuery === true) {\n                return true;\n            } else {\n                updateUserQuery += \" WHERE \\\"nickname\\\" = \\'\" +  nickname + \"\\' RETURNING *\";\n            }\n            return await this._dbContext.db.oneOrNone(updateUserQuery);\n        }\n        catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n});\n\n//# sourceURL=webpack:///./src/models/users-model.js?");

/***/ }),

/***/ "./src/models/votes-model.js":
/*!***********************************!*\
  !*** ./src/models/votes-model.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _db_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../db-config */ \"./src/db-config.js\");\n/**\n * Votes model.\n * @module models/votes-model\n */\n\n\nconst PQ = __webpack_require__(/*! pg-promise */ \"pg-promise\").ParameterizedQuery;\n\n/** Class representing an Votes model. */\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class VotesModel {\n\n    /**\n     * Create an Votes model.\n     */\n    constructor() {\n        this._dbContext = _db_config__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    }\n\n    /**\n     * Count all votes.\n     * @return votes amount\n     * @return empty object if no votes\n     */\n    async countAllVotes() {\n        try {\n            return await this._dbContext.db.one(`SELECT count(*) FROM votes`);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Truncate all votes.\n     */\n    async truncateAllVotes() {\n        try {\n            return await this._dbContext.db.none(`TRUNCATE votes CASCADE`);\n        } catch (error) {\n            console.log('ERROR: ', error.message || error);\n        }\n    }\n\n    /**\n     * Add new voice or update existing for thread from user.\n     */\n    async createOrUpdateVote(voice, user, thread) {\n        let result = {\n            isSuccess: false,\n            message: '',\n            data: null\n        };\n        try {\n            const voteQuery = new PQ(`INSERT INTO votes as v \n                (nickname, thread, voice)\n                VALUES ($1, $2, $3) \n                ON CONFLICT ON CONSTRAINT unique_vote DO\n                UPDATE SET voice = $3 WHERE v.voice <> $3\n                RETURNING *, (xmax::text::int > 0) as existed`);\n            voteQuery.values = [user.nickname, thread.id, voice];\n            result.data = await this._dbContext.db.oneOrNone(voteQuery);\n            result.isSuccess = true;\n        } catch (error) {\n            result.message = error.message;\n            console.log('ERROR: ', error.message || error);\n        }\n        return result;\n    }\n\n});\n\n//# sourceURL=webpack:///./src/models/votes-model.js?");

/***/ }),

/***/ "./src/modules/db.js":
/*!***************************!*\
  !*** ./src/modules/db.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return DatabaseModule; });\n/**\n * Database module.\n * @module modules/db\n */\n\nconst pgp = __webpack_require__(/*! pg-promise */ \"pg-promise\")({\n    capSQL: true // if you want all generated SQL capitalized\n});\n\n/** Class representing a Database module. */\nclass DatabaseModule {\n\n    /**\n     * Create an DB module.\n     * @param connOptions - options for database connections\n     */\n    constructor(connOptions = {}) {\n        this._pgp = pgp;\n        this._db = pgp(connOptions); // database instance\n    }\n\n    get db() {\n        return this._db;\n    }\n\n    get pgp() {\n        return this._pgp;\n    }\n\n}\n\n//# sourceURL=webpack:///./src/modules/db.js?");

/***/ }),

/***/ "./src/routes/forums-router.js":
/*!*************************************!*\
  !*** ./src/routes/forums-router.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controllers_forums_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controllers/forums-controller */ \"./src/controllers/forums-controller.js\");\nvar express = __webpack_require__(/*! express */ \"express\");\n\n\n\nvar forumsRouter = express.Router();\n\nforumsRouter.post('/create', _controllers_forums_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createForum);\nforumsRouter.get('/:slug/details', _controllers_forums_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getForumDetails);\nforumsRouter.post('/:slug/create', _controllers_forums_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createThreadForForum);\nforumsRouter.get('/:slug/threads', _controllers_forums_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getForumThreads);\nforumsRouter.get('/:slug/users', _controllers_forums_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getForumUsers);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (forumsRouter);\n\n//# sourceURL=webpack:///./src/routes/forums-router.js?");

/***/ }),

/***/ "./src/routes/index-router.js":
/*!************************************!*\
  !*** ./src/routes/index-router.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar express = __webpack_require__(/*! express */ \"express\");\n\nvar indexRouter = express.Router();\n\n/* GET index */\nindexRouter.get('/', function(req, res) {\n    res.send('Welcome to Forum API!');\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (indexRouter);\n\n//# sourceURL=webpack:///./src/routes/index-router.js?");

/***/ }),

/***/ "./src/routes/posts-router.js":
/*!************************************!*\
  !*** ./src/routes/posts-router.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controllers_posts_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controllers/posts-controller */ \"./src/controllers/posts-controller.js\");\nvar express = __webpack_require__(/*! express */ \"express\");\n\n\n\nvar postsRouter = express.Router();\n\npostsRouter.get('/:id/details', _controllers_posts_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getPostDetails);\npostsRouter.post('/:id/details', _controllers_posts_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updatePostDetails);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (postsRouter);\n\n//# sourceURL=webpack:///./src/routes/posts-router.js?");

/***/ }),

/***/ "./src/routes/service-router.js":
/*!**************************************!*\
  !*** ./src/routes/service-router.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controllers_service_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controllers/service-controller */ \"./src/controllers/service-controller.js\");\nvar express = __webpack_require__(/*! express */ \"express\");\n\n\n\nvar serviceRouter = express.Router();\n\nserviceRouter.get('/status', _controllers_service_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getServiceStatus);\nserviceRouter.post('/clear', _controllers_service_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].clearAll);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (serviceRouter);\n\n//# sourceURL=webpack:///./src/routes/service-router.js?");

/***/ }),

/***/ "./src/routes/threads-router.js":
/*!**************************************!*\
  !*** ./src/routes/threads-router.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controllers_threads_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controllers/threads-controller */ \"./src/controllers/threads-controller.js\");\nvar express = __webpack_require__(/*! express */ \"express\");\n\n\n\nvar threadsRouter = express.Router();\n\nthreadsRouter.post('/:slug_or_id/create', _controllers_threads_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createPostsForThread);\nthreadsRouter.post('/:slug_or_id/vote', _controllers_threads_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createOrUpdateVoteForThread);\nthreadsRouter.get('/:slug_or_id/details', _controllers_threads_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getThreadDetails);\nthreadsRouter.post('/:slug_or_id/details', _controllers_threads_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateThreadDetails);\nthreadsRouter.get('/:slug_or_id/posts', _controllers_threads_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getThreadPosts);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (threadsRouter);\n\n//# sourceURL=webpack:///./src/routes/threads-router.js?");

/***/ }),

/***/ "./src/routes/users-router.js":
/*!************************************!*\
  !*** ./src/routes/users-router.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controllers_users_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controllers/users-controller */ \"./src/controllers/users-controller.js\");\nvar express = __webpack_require__(/*! express */ \"express\");\n\n\n\nvar usersRouter = express.Router();\n\nusersRouter.get('/:nickname/profile', _controllers_users_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getUser);\nusersRouter.post('/:nickname/profile', _controllers_users_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateUser);\nusersRouter.post('/:nickname/create', _controllers_users_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createUser);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (usersRouter);\n\n//# sourceURL=webpack:///./src/routes/users-router.js?");

/***/ }),

/***/ "./src/serializers/posts-serializers.js":
/*!**********************************************!*\
  !*** ./src/serializers/posts-serializers.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Posts serializer.\n * @module serializers/posts-serializer\n */\n\n/** Class representing Posts serializer. */\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class PostsSerializer {\n\n    /**\n     * Serialize one posts object to API output format.\n     * @param post - object to serialize\n     * @return Object - serialized post object\n     */\n    serialize_post(post) {\n        let postResult = {\n            id: Number(post.id), author: post.author_nickname,\n            forum: post.forum_slug, thread: Number(post.thread_id),\n            isEdited: post.isedited,\n            created: post.created, message: post.message\n        };\n        if (post.parent !== post.id) {\n            postResult.parent = Number(post.parent);\n            postResult.path = post.path_to_this_post;\n        }\n        return postResult;\n    }\n\n    /**\n     * Serialize array of posts to API output format.\n     * @param posts - array of objects to serialize\n     * @return array of serialized post objects\n     */\n    serialize_posts(posts) {\n        if (!posts.length) {\n            return [];\n        }\n        return posts.map(function(post) {\n            let postResult = {\n                id: Number(post.id), author: post.author_nickname,\n                forum: post.forum_slug, thread: Number(post.thread_id),\n                isEdited: post.isEdited,\n                created: post.created, message: post.message\n            };\n            if (post.parent !== post.id) {\n                postResult.parent = Number(post.parent);\n                postResult.path_to_this_post = post.path_to_this_post;\n            }\n            return postResult;\n        });\n    }\n\n});\n\n//# sourceURL=webpack:///./src/serializers/posts-serializers.js?");

/***/ }),

/***/ "./src/serializers/threads-serializers.js":
/*!************************************************!*\
  !*** ./src/serializers/threads-serializers.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Threads serializer.\n * @module serializers/threads-serializer\n */\n\n/** Class representing Threads serializer. */\n/* harmony default export */ __webpack_exports__[\"default\"] = (new class ThreadsSerializer {\n\n    /**\n     * Serialize one thread object to API output format.\n     * @param thread - object to serialize\n     * @return serialized thread object\n     */\n    serialize_thread(thread) {\n        return {\n            id: Number(thread.id), author: thread.author_nickname,\n            slug: thread.slug,\n            forum: thread.forum_slug, created: thread.created,\n            title: thread.title, message: thread.message,\n            votes: thread.votes\n        };\n    }\n\n    /**\n     * Serialize array of threads to API output format.\n     * @param threads - array of objects to serialize\n     * @return array of serialized thread objects\n     */\n    serialize_threads(threads) {\n        if (!threads.length) {\n            return [];\n        }\n        return threads.map(function(thread) {\n            return {\n                id: Number(thread.id), author: thread.author_nickname,\n                slug: thread.slug,\n                forum: thread.forum_slug, created: thread.created,\n                title: thread.title, message: thread.message,\n                votes: thread.votes\n            };\n        });\n    }\n\n});\n\n//# sourceURL=webpack:///./src/serializers/threads-serializers.js?");

/***/ }),

/***/ "./src/utils/db-helpers.js":
/*!*********************************!*\
  !*** ./src/utils/db-helpers.js ***!
  \*********************************/
/*! exports provided: column_with_skip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"column_with_skip\", function() { return column_with_skip; });\n/**\n * Database helpers functions.\n * @module utils/db-helpers\n */\n\n/**\n * Generic way to skip NULL/undefined values for strings\n */\nfunction column_with_skip(col) {\n    return {\n        name: col,\n        skip: function () {\n            let val = this[col];\n            return val === null || val === undefined;\n        }\n    };\n}\n\n//# sourceURL=webpack:///./src/utils/db-helpers.js?");

/***/ }),

/***/ 0:
/*!**************************!*\
  !*** multi ./src/app.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/app.js */\"./src/app.js\");\n\n\n//# sourceURL=webpack:///multi_./src/app.js?");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"express\");\n\n//# sourceURL=webpack:///external_%22express%22?");

/***/ }),

/***/ "morgan":
/*!*************************!*\
  !*** external "morgan" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"morgan\");\n\n//# sourceURL=webpack:///external_%22morgan%22?");

/***/ }),

/***/ "pg-promise":
/*!*****************************!*\
  !*** external "pg-promise" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"pg-promise\");\n\n//# sourceURL=webpack:///external_%22pg-promise%22?");

/***/ })

/******/ });